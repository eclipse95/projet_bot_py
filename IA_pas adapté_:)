#IL EST EN COURS DE MODIF TKT ALEX JE VAIS L'ADAPTER A NOTRE STRUCTURE est complété ce que t'a mis



def pourcentage(x,y=30):				# x:nombre d'unité à envoyer / y: nbre d'unité sur la planètes (=30 capacité max planètes)
	pourc=(x/y)/100
	return pourc	
# strategie 2
def strategy_level2(board):
	#STRATEGIE D'ATTAQUE
	capacité_max=30
	
	for a in range (len(board.nodeAllié)):   # Parcours des cellules alliées
		if board.nodeAllié[a].neighborEnemie == [] and board.nodeAllié[a].neighborNeutre != []  :       #Si les voisins sont neutres (ou allié)
                target = board.nodeAllié[a].neighborNeutre[0]
                troupe_a_envoyer_min=(board.nodeAllié[a].neighborNeutre[0].nbdef+board.nodeAllié[a].neighborNeutre[0].nboff+1) #Nbre de vaisseaux à envoyé pour prendre la planète
				for b in range(len(board.nodeAllié[i].neighborNeutre)) :                              #On parcourt les voisins neutres
                    troupe_a_envoyer = (board.nodeAllié[a].neighborNeutre[0].nbdef+board.nodeAllié[a].neighborNeutre[0].nboff+1)
                    if troupe_a_envoyer < troupe_a_envoyer_min :                           
                        troupe_a_envoyer_min = troupe_a_envoyer                           
                        target = board.nodeAllié[a].neighborNeutre[b]	
	
				if (target.nboff + target.nbdef) < board.nodeAllié[a].nboff :     #Teste si on peut attaquer
                    order = parametre_move(userid,100,board.nodeAllié[a],target)       #crée l'ordre d'attaque
                    poooc.order(order)                                      #A l'ATTAQUE
        
		
		if board.nodeAllié[a].neighborEnemie == [] and board.nodeAllié[a].neighborNeutre == [] and board.nodeAllié[a].neighborAllié != [] :    #Si les voisins sont alliés
                for b in range(len(board.nodeAllié[a].neighborAllié)):     #On parcourt ces voisins 
                    if board.nodeAllié[a].neighborAllié[b].neighborEnemie != [] :      #Si un voisin est à coté d'un ennemie
                        target2 = board.nodeAllié[a].neighborEnemie[b] 
                    elif board.nodeAllié[a].neighborAllié[b].neighborNeutre != [] and board.nodeAllié[a].neighborAllié[b].neighborEnemie == [] : #Si ces voisins n'ont pas d'ennemie à coté d'eux mais un neutre
                        target2 = Map.cellAlly[a].voisinsAlly[b]     
                    else :                                                                                                      #Sinon on envoie au hasard
                        target2 = Map.cellAlly[a].voisinsAlly[0]
                        
                if board.nodeAllié[a].nboff >= 3 and board.nodeAllié[a].neighborAllié[b].nboff<27 :                                                                    
                    poooc.order(parametre_move(userid,100,Map.cellAlly[i],target2))
					
		if board.nodeAllié[a].neighborEnemie != [] :                #Si les voisins sont ennemies
                 target3 = board.nodeAllié[a].neighborEnemie[0]
                 troupe_a_envoyer_min2 = (board.nodeAllié[a].neighborEnemie[0].nbdef + board.nodeAllié[a].neighborEnemie[0].nboff+2) #Nbre de vaisseaux à envoyé pour prendre la planète (calcule approximatif)
                 for b in range(len(board.nodeAllié[a].neighborEnemie)) :  #On parcourt les voisins ennemies
                     troupe_a_envoyer = (board.nodeAllié[a].neighborEnemie[0].nbdef + board.nodeAllié[a].neighborEnemie[0].nboff+2) #Nbre de vaisseaux à envoyé pour prendre la planète (calcule approximatif)
                     if (troupe_a_envoyer < troupe_a_envoyer_min2) :           #Ne prend pas en compte les unités ennemies présentent sur la ligne (à corriger donc) + les unités que l'ennemi aura produit le temps du déplacement des unités alliées 
                        troupe_a_envoyer_min2 = troupe_a_envoyer                           
                        target3 = Map.cellAlly[i].voisinsEnem[j]
                        
                 if (target3.nboff + target3.nbdef) < board.nodeAllié[a].nboff :      #Teste si on peut attaquer
                    order = parametre_move(userid,100,Map.cellAlly[i],target3)        #crée l'ordre d'attaque
                    poooc.order(order)                                                #A l'ATTAQUE
	
	
	
#Stratégie Defense
# Replie stratégique si unité def planétes > unité off attaquant (evite perte unité off)


#A FAIRE mais compliquer  car il faut les renseignement sur les arrêtes


#Autre Stratégie 
#envoyer unité si capacité atteint 
